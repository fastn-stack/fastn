-- import: fastn/processors as pr
-- import: fastn.com/expander/lib
-- import: bling.fifthtry.site/note
-- import: color-doc.fifthtry.site/components as cp
-- import: color-doc.fifthtry.site as cd

-- ds.page: color-scheme in doc-site

-- ds.markdown:
if: { !show-planning }

In this video we will learn how to add or change color-scheme

-- ds.youtube:
if: { !show-planning }
v: YNcKQuIN1QQ

-- lib.video-audience: How to add a color-scheme
if: { show-planning }
owner: Ajit
aud: Website Builders

Learners will understand how to add or change a color-scheme in doc-site.


-- ds.h1: Straight to the point
if: { show-planning }

1. Select a color-scheme
2. Add the package in your fastn project
3. Use the `colors` property in the component page


-- ds.h1: Introduction
if: { show-planning }

Welcome to the video.

Today we learn how to add or change the color-scheme in doc-site

-- ds.image:
if: { show-planning }
src: $fastn-assets.files.expander.ds.img.cs-intro.png

-- ds.markdown:
if: { show-planning }

A well-chosen color scheme is a powerful tool in website creation. It enhances
the visual appeal, reinforces branding, improves readability and accessibility,
engages users, promotes navigation, and creates a cohesive and meaningful user
experience.

-- ds.h1: Introduction: Why Color Schemes Matter
if: { !show-planning }

Color sets the tone for your website. It builds emotional resonance, guides
attention, and reinforces your brand. A consistent color scheme ensures
visual harmony and improves usability—especially across components and pages.
It is important because it enhances visual appeal, establishes branding,
improves readability, guides user engagement and navigation, creates
coherence, and has cultural and psychological significance. A well-chosen
color scheme contributes to a visually appealing and cohesive website that
resonates with users.

The importance of a well-thought-out color scheme in website creation cannot be
overstated as it significantly impacts the overall user experience and
perception of the site.

`color-scheme` is added through a property of page component of `doc-site`.

-- ds.h1: How to use this colour scheme 

The importance of colour in a website’s overall look and feel is well known. The
right colour scheme can evoke emotions, create visual interest, and direct a
user’s attention to specific elements on a page. That’s why the ftd colour
scheme framework provides an easy and powerful way to define colour schemes and
apply them to your website. 

To start, you can choose from [existing colour scheme packages](https://fastn.com/featured/cs/) 
or create your own
[custom colour scheme](https://fastn.com/figma-to-fastn-cs/). To apply a colour 
cheme package on top of your package,
you’ll need to import it into `FASTN.ftd`. 

- for documentation templates like [doc-site](https://doc-site.fifthtry.site/types/)

For example, let’s say you’re using the page component from `doc-site` package
and want to apply the <add color scheme name here> scheme package on top of it.

To add color scheme to your [fastn](https://fastn.com/) 
[doc-site](https://doc-site.fifthtry.site/cs/). Edit your `FASTN.ftd` file and add
color scheme dependency into it.

In the below example, we are using <add color scheme name here> color scheme.

Add color scheme dependency into your `FASTN.ftd` file as shown in below
example:

-- ds.code:
lang: ftd

\-- fastn.dependency: `<add color scheme name here>`

-- ds.markdown:

Now modify `FASTN/ds.ftd` module which is already added inside your `fastn`
package.

Import `<add color scheme name here>` dependency into `FASTN/ds.ftd`

-- ds.code:
lang: ftd

\-- import: `<add color scheme name here>`

-- ds.markdown:

Change `-- component page` `colors` property `ftd.color-scheme colors:
$ftd.default-colors` with `ftd.color-scheme colors: $<add color scheme name here>.main`

replace this line of `FASTN/ds.ftd` file:

-- ds.code: 
lang: ftd

\-- ftd.color-scheme color-scheme: $ftd.default-colors

-- ds.markdown:

 with:

-- ds.code:
lang: ftd

\-- ftd.color-scheme color-scheme: $<add color scheme name here>.main

-- note.note: Note

**Case A:** Some projects needs visibility i.e. instead of passing reference,
  color-scheme should be visible and hence in such cases we pass the name of
  the color-scheme as the value of `colors` property.

**Case B:** But at times, you need to do things quickly by changing one line of
  code. In such cases we give alias `as my-cs` after the package name when
  adding it as the dependency. Then pass the reference by alias while importing
  and also passing it as the value of the `colors` property.

-- ds.h1: Change the color-scheme

**Case A:** To change the color-scheme,

- Select the color-scheme
- Replace the package name of old color-scheme with new one dependency
- Replace the package name of old color-scheme with new one
- Use the new color-scheme name followed by `.main`

**Case B:** To change the color-scheme,

- Select the color-scheme
- Replace the old color-scheme with new one as dependency

-- ds.markdown:

In summary, a well-chosen color scheme is a powerful tool in website creation.
It enhances the visual appeal, reinforces branding, improves readability and
accessibility, engages users, promotes navigation, and creates a cohesive and
meaningful user experience.

-- cd.color-pallete: Standalone Colors
pallete: $cd.standalone

-- cd.color-pallete: Background Colors
pallete: $cd.background-colors

-- cd.color-pallete: CTA Primary Colors
pallete: $cd.cta-primary-colors

-- cd.color-pallete: CTA Secondary Colors
pallete: $cd.cta-secondary-colors

-- cd.color-pallete: CTA Tertiary Colors
pallete: $cd.cta-tertiary-colors

-- cd.color-pallete: CTA Danger Colors
pallete: $cd.cta-danger-colors

-- cd.color-pallete: Error Colors
pallete: $cd.error-colors

-- cd.color-pallete: Success Colors
pallete: $cd.success-colors

-- cd.color-pallete: Warning Colors
pallete: $cd.warning-colors

-- cd.color-pallete: Info Colors
pallete: $cd.info-colors

-- cd.color-pallete: Accent Colors
pallete: $cd.accent-colors

-- cd.color-pallete: Custom Colors
pallete: $cd.custom-colors

-- ds.h1: Closing Remarks
if: { show-planning }

Thank you guys, keep watching these videos to learn more about fastn. Checkout
the `fastn` website.

Support us by clicking on this link and give us a star ⭐ on GitHub and join
our fastn community on Discord.


-- ds.markdown:
if: { !show-planning }

Thank you guys, keep watching these videos to learn more about fastn.

Support us by giving a star ⭐ on
[GitHub](https://github.com/fastn-stack/fastn/) and join our fastn community
on [Discord](/discord/).


-- ds.h1: Final Video
if: { show-planning }

-- ds.youtube:
if: { show-planning }
v: YNcKQuIN1QQ


-- end: ds.page


-- boolean $show-planning: false
$processor$: pr.get-data
key: show-planning
